没有特殊要求下,最好使用set集合,因为set集合没有特殊信息需要"一方"自己维护,完全可以交给"多方维护",能够提高性能.
#hibernate缓存
1.一级缓存,session级别的缓存.一个session做了一个查询操作,它会把这个查询的结果放在一级缓存中,如果短时间这个session又做了同一个操作,那么heibernate
直接从一级缓存中拿,而不会去连接数据库.
2.二级缓存,sessionFactory级别的缓存,同一个sessionFactory创建的session执行了相同的操作,hibernate就会从二级缓存中拿结果,而不会再去连接数据库.


hibernate+spring 实现二级缓存
<property name="hibernateProperties">
  <props>
    <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
  </props>
</hibernateProperties>

hibernate配置
<!--数据库连接池的大小-->
<prop key="connection.pool_size"></prop>
<!--绑定session到当前线程-->
<prop key="current_session_context_class">thread</prop>

hibernate对象有三种状态:1.瞬时态;2.持久态;3.脱管态
1.瞬时态,由new命令开辟内存的java对象,如果没有变量对该对象进行引用,它将被java虚拟机回收.瞬时态对象在内存中孤立存在,它是携带信息的载体,不和数据库的数据有
任何关联关系,可通过session的save()||saveOrUpdate()方法将瞬时对象与数据库相关联,并将数据对应的插入数据库中,此时瞬时态对象转变为持久态
2.持久态,处于该状态的对象在数据库中具有对应的记录,并拥有一个持久化标识.如果用delete()方法,对应的持久对象就变成瞬时态对象,因数据库中的对应数据已被删除,
该对象不再与数据库的记录关联.当一个session执行close(),clear(),evict()之后,持久对象变成托管对象.
持久对象的特点:1.和session实例关联;2.数据库中有与之关联的记录
3.脱管态,当与持久对象关联的session被关闭后,该持久对象转变为脱管对象.当脱管对象被重新关联到session上时,再次转变成为持久对象.
脱管对象拥有数据库的识别值,可通过update(),saveOrUpdate()等方法,转变为持久对象.
脱管对象的特点:1.本质上与瞬时对象相同,在没有任何变量引用它时,jvm会在适当的时候将其回收;2.比瞬时对象多了一个数据库记录标识值
#persist()和save()区别
当对一个数据库记录标识值不为null的对象执行save().会把一个新的数据库记录标识值保存到数据库中.persist()方法会抛出异常
#get()和load()区别
当数据库中不存在数据库记录标识值对应的记录时,get()方法返回null,load()方法会抛出ObjectNotFoundException;load()方法支持延迟加载策略,get()不支持
#update()
使一个脱管态的对象转变成为持久化对象,并且计划执行一条update语句;若希望session仅当修改了对象的属性后,才执行update(),可以把映射文件中<class>元素的
select-before-update设为true
#saveOrUpdate(),同时包含了save(),update()
脱管状态的对象执行update(),瞬时状态的对象执行save().根据是否有数据库记录标识值
#merge()
