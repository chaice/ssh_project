切面(Aspect):一个关注点的模块化,这个关注点可能会横切多个对象.在spring aop中切面可以使用基于模式,或者基于注解
连接点(Joinpoint):在程序执行过程中某个特定的点,比如某方法调用的时候或者处理异常的时候.在spring中一个连接点总是表示一个方法的执行
通知(Advice):在切面的某个特定的连接点上执行的动作.以拦截器做通知模型,并维护一个以连接点为中心的拦截器链
切入点:匹配连接点的断言.通知和一个切入点表达式关联,并在满足这个切入点的连接点上运行.切入点如何与连接点匹配是spring的核心
引入(Introduction):用来给一个类型声明额外的方法或属性.spring允许引入新的接口道任何被代理得对象
目标对象(Target Object):被一个或者多个切面所通知的对象.也被称作被通知对象
AOP代理(AOP Proxy):AOP框架创建的对象,用来实现切面契约.在spring中,AOP代理可以是JDK动态代理或CGLIB代理
前置通知(Before Advice):在某连接点执行之前的通知,但这个通知不能阻止连接点的执行流程
后置通知(After returning Advice):在某连接点正常完成后执行的通知
最终通知(After Advice):在某接入点退出的时候执行的通知
异常通知(After throwing Advice):在方法抛出退出时执行的通知
环绕通知(Around Advice):包围一个连接点的通知

在spring中拥有切面的类本身,不可能是其他切面中通知的目标.一个类上面的@Aspect注解标识它为一个切面,并且从自动代理中排除它

启用spring对@Aspect的支持,并确保自动代理的bean能被这些切面通知.自动代理是指spring会判断一个bean是否使用了一个或多个切面通知,并根据此自动相应的代理以
拦截其方法调用.
    @Before("")
    public void before(){

    }
    @AfterReturning("com.ccit.inter.impl.AppleColorFilter.test() && args()")
    public void afterReturning1(JoinPoint joinPoint){

    }
    @AfterReturning("com.ccit.inter.impl.AppleColorFilter.test() && @annotation(annotation)")
    public void afterReturning2(JoinPoint joinPoint,MyAnnotation annotation){

    }
    //有时候需要在通知体内得到返回值,可以使用returning来绑定返回值
    @AfterReturning(pointcut = "",returning = "object")
    public void afterReturning3(JoinPoint joinPoint,Object object){

    }
    //不论一个方法是如何结束的,最终通知都会执行
    @After("")
    public void after(){

    }
    @AfterThrowing("")
    public void afterThrowing1(){

    }
    /*限制通知只在某种特殊的异常被抛出的时候匹配,还可以在通知体内得到被抛出的异常,使用throwing属性不仅可以限制
      匹配的异常类型,还可以将抛出的异常绑定到通知的一个参数上
    */
    @AfterThrowing(pointcut = "",throwing = "ex")
    public void afterThrowing2(Exception ex){

    }
访问当前的连接点,任何通知方法可以将第一个参数定义为JoinPoint类型,定义了一系列有用的方法,
getArgs();返回方法的参数;getThis();返回代理对象;getTarget();返回目标;
传递参数给通知:为了可以在通知体内访问参数,可以使用args来绑定.
args(value,..);只会匹配那些接受至少一个参数的方法的执行
绑定注解 @annotation()
代理对象（this）、目标对象（target） 和注解（@within, @target, @annotation, @args）都可以用一种类似的格式来绑定.
确定参数名,argNames(参数名1,参数名2)
