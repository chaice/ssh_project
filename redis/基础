#集合类主要分为Collection和Map
*.Collection是List,Set等集合高度抽象出来的接口,包含了这些集合的基本操作.
*.List接口通常表示一个列表,其中的元素可以重复,常用实现类是ArrayList和LinkedList
1.ArrayList,是基于数组实现的是一个动态数组,其容量能自动增长,是基于索引的数据结构,它使用索引在数组中搜索和读取数据很快,删除需要重排数组中的所有数据
ArrayList是线程不安全的,只能在单线程环境下,多线程环境下可以使用Collections.synchronizedList(List l)返回一个线程安全的ArrayList,
也可以使用concurrent并发包下的CopyOnWriteArrayList类实现了Serializable接口,支持序列化,能够通过序列化传输;实现了RandomAccess接口,支持快速随机访问,
实际上就是通过下标序号进行快速访问;实现了Cloneable接口,能被克隆
2.LinkedList是基于双向循环链表实现的,除了可以当做链表来操作外,它还可以当做栈,队列和双队列来使用.插入和删除更快,因为不需要修改大小,也不需要在数据装满后将
所有的数据重新装入一个数组.需要更多的内存,每个节点中存储的是实际的数据和前后节点的位置
同样是线程不安全的,只在单线程下适合使用;实现了Serializable,支持序列化,能够通过序列化传输;实现了Cloneable接口,能被克隆
3.Vector也是基于数组实现的,是一个动态数组,其容量能自动增长,它的很多方法都加入了同步语句,因此是线程安全的,可以用于多线程环境
没有实现Serializable接口,因此不支持序列化,实现了Cloneable接口,能被克隆,实现了RandomAccess接口,支持快速随机访问
4.Set接口通常表示一个集合,其中的元素不允许重复,常用实现类有HashSet和TreeSet
HashSet是基于HashMap来实现的,相关HashSet操作,基本上是直接调用底层HashMap的相关方法来实现的;
TreeSet是基于TreeMap来实现的,实现了SortedSet接口,因此是有序的集合(集合中的元素要实现Comparable接口,并覆写Compartor函数)
*.Map是一个映射接口,其中的每个元素都是一个key-value键值对.
1.HashMap是基于哈希表的Map接口的非同步实现,此实现提供所有可选的映射操作,并允许使用null值和null键.底层是一个数组结构,数组中的每一项又是一个链表.不能保
证随着时间的推移Map中的元素次序是不变的
2.HashTable基于哈希表的Map接口的同步实现,线程安全的,能用于多线程环境,通过单链表解决冲突问题,容量不足时,会自动增长.不接受null,在单线程情况下比HashMap慢
实现了Serializable,Cloneable接口,支持序列化,能被克隆
