代理:一种常用的设计模式,目的就是为其他对象提供一个代理以控制对某个对象的访问.代理类负责对委托类预处理信息,过滤消息并转发消息,以及进行消息被委托
类处理后的后续处理.为了保证行为的一致性,代理类和委托类通常会实现相同的接口,通过代理类这中间一层,能有效的控制对委托类对象的直接访问,可以很好的隐
藏和保护委托类对象,同时也为实施不同控制策略预留了空间.

#ThreadLocal
为每个使用该变量的线程提供独立的变量副本,每一个线程都可以独立的改变自己的副本,而不影响其他线程所对应的副本.

多个线程同时访问同一个对象的数据时会有线程安全问题.


#Spring   是为了解决企业应用程序开发复杂性而创建的.
spring核心容器 提供spring框架的基本功能.核心容器的主要组件是BeanFactory,它是工厂模式的实现.BeanFactory使用控制反转(ioc)
将应用程序的的配置和依赖性规范和实际的应用程序代码分开.
spring上下文 是一个配置文件,向spring框架提供上下文信息.

bean的创建是典型的工厂模式,顶级接口是BeanFactory
BeanFactory 有三个子类 每个子接口都有要使用的场合,主要是为了区分在spring内部的操作过程中对象的传递和转化过程中,对对象的数据访问所做的限制.
ListableBeanFactory  --------表示这些bean是可列表的
HierarchicalBeanFactory --------表示这些bean是有继承关系的
AutowireCapableBeanFactory --------定义bean的自动装配规则

bean的定义主要由BeanDefinition描述
bean的定义就是完整的描述了在spring配置文件中定义的<bean></bean>节点中所有的信息,包括各种子节点.当spring成功解析定义的bean后,在spring内部就被转化成
BeanDefinition对象,以后所有操作都是对这个对象完成的.

bean的解析过程非常复杂,功能被分的很细,要扩展的地方很多,必须保证有足够的灵活性.bean的解析就是对spring配置文件的解析



Context 组件 ,实际上是给spring提供一个运行时环境,用来保存各个对象的状态.
ApplicationContext 是context的顶级父类,除了能标识一个应用环境的基本信息外,还继承了五个接口,这五个接口主要是扩展了Context的功能.
ResourcePatternResolver,ApplicationEventPublisher,ListableBeanFactory,HiberarchicalBeanFactory,MessageSource
ApplicationContext继承了BeanFactory,说明了spring容器中运行主体对象是bean.还继承了ResourceLoader接口,使得ApplicationContext可以访问到任何的外部资源.
ApplicationContext的子类主要包括
1.ConfigurableApplicationContext 表示Context是可修改的,用户可以动态的添加或修改已有的配置信息.它下面还有多个子类,最常用的是
AbstractRefreshableApplicationContext.
2.WebApplicationContext 为web准备的,可以直接访问到servletContext
总体来说,applicationContext必须要完成以下几件事:
1.标识一个应用环境;2.利用BeanFactory创建bean对象;3.保存对象关系表;4.能够捕获各种事件
Context把资源的加载,解析和描述工作委托给了ResourcePatternResolver类完成,把资源的加载,解析和资源的定义整合在一起.

Core组件
作为核心组件,其中一个重要组成部分是定义了资源的访问方式.
Resource 接口封装了各种可能的资源类型,对使用者屏蔽了各种可能的文件类型.
继承了InputStreamSource接口,这个接口中有个getInputStream方法,返回的是InputStream类,这样所有的资源都可以通过InputStream这个类来截取.
加载资源,资源的加载者要统一,这个任务是由ResourceLoader接口完成,只要实现这个接口就可以加载所有的资源,,默认实现类是DefaultResourceLoader.

ioc容器实际上是context组件结合其他两个组件共同构建了一个关系网,构建的入口在AbstractApplicationContext类的refresh方法中.
在refresh方法中主要包括:
1.构建BeanFactory,以便产生bean
2.注册可能感兴趣的事件
3.创建bean实例对象
4.触发被监听的事件.
